package com.soldin.register.listeners;

import com.soldin.register.SoldinRegister;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.*;

import java.util.List;
import java.util.UUID;
import java.util.HashMap;
import java.util.Map;

public class AuthListener implements Listener {

    private final Map<UUID, Integer> reminderTasks = new HashMap<>();
    private final Map<UUID, Integer> barTasks = new HashMap<>();
    private final SoldinRegister plugin;

    public AuthListener(SoldinRegister plugin) {
        this.plugin = plugin;
    }

    private boolean shouldBlock(Player p) {
        return !plugin.isAuthenticated(p.getUniqueId());
    }

    @EventHandler
    public void onJoin(PlayerJoinEvent e) {
        Player p = e.getPlayer();
        plugin.revokeAuthenticated(p.getUniqueId());

        long timeoutMs = plugin.getConfig().getLong("timeouts.auth_seconds", 60) * 1000L;
        long deadline = System.currentTimeMillis() + timeoutMs;
        plugin.setAuthDeadline(p.getUniqueId(), deadline);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        p.sendMessage(ChatColor.translateAlternateColorCodes('&',
                plugin.getConfig().getString("messages.on_join",
                        "&e–í–≤–µ–¥–∏ &a/register <–ø–∞—Ä–æ–ª—å> &e–∏–ª–∏ &a/login <–ø–∞—Ä–æ–ª—å> [–∫–æ–¥2FA]")));

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if (plugin.getConfig().getBoolean("reminder.enabled", true)) {
            int intervalTicks = plugin.getConfig().getInt("reminder.interval_seconds", 2) * 20;
            int taskId = Bukkit.getScheduler().runTaskTimer(plugin, () -> {
                if (!plugin.isAuthenticated(p.getUniqueId()) && p.isOnline()) {
                    if (plugin.storage().getByUUID(p.getUniqueId()) == null) {
                        p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&c–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg <–ø–∞—Ä–æ–ª—å>"));
                    } else {
                        p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e–í–æ–π–¥–∏—Ç–µ: /login <–ø–∞—Ä–æ–ª—å>"));
                    }
                }
            }, 0L, intervalTicks).getTaskId();
            reminderTasks.put(p.getUniqueId(), taskId);
        }

        // ‚è± –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–¥ —Ö–ø/–µ–¥–æ–π (action bar)
        int barTask = Bukkit.getScheduler().runTaskTimer(plugin, () -> {
            if (!plugin.isAuthenticated(p.getUniqueId()) && p.isOnline()) {
                long left = (plugin.getAuthDeadline(p.getUniqueId()) - System.currentTimeMillis()) / 1000L;
                if (left < 0) left = 0;
                String msg = ChatColor.translateAlternateColorCodes('&',
                        plugin.getConfig().getString("messages.auth_timer", "&e–û—Å—Ç–∞–ª–æ—Å—å &c{time}s –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"))
                        .replace("{time}", String.valueOf(left));
                p.sendActionBar(msg);
            }
        }, 0L, 20L).getTaskId();
        barTasks.put(p.getUniqueId(), barTask);

        // –ö–∏–∫ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞
        Bukkit.getScheduler().runTaskLater(plugin, () -> {
            if (!plugin.isAuthenticated(p.getUniqueId()) && p.isOnline()) {
                p.kickPlayer(ChatColor.translateAlternateColorCodes('&',
                        plugin.getConfig().getString("messages.auth_time_expired", "&c–í—Ä–µ–º—è –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏—Å—Ç–µ–∫–ª–æ.")));
            }
        }, timeoutMs / 50L);
    }

    @EventHandler
    public void onQuit(PlayerQuitEvent e) {
        plugin.revokeAuthenticated(e.getPlayer().getUniqueId());
        plugin.clearAuthDeadline(e.getPlayer().getUniqueId());
        plugin.resetAttempts(e.getPlayer().getUniqueId());

        UUID u = e.getPlayer().getUniqueId();
        if (reminderTasks.containsKey(u)) Bukkit.getScheduler().cancelTask(reminderTasks.remove(u));
        if (barTasks.containsKey(u)) Bukkit.getScheduler().cancelTask(barTasks.remove(u));
    }

    @EventHandler
    public void onChat(AsyncPlayerChatEvent e) {
        if (plugin.getConfig().getBoolean("locks.block_chat", true) && shouldBlock(e.getPlayer())) {
            e.setCancelled(true);
            e.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&',
                    plugin.getConfig().getString("messages.must_login",
                            "&c–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏: /login <–ø–∞—Ä–æ–ª—å>")));
        }
    }

    // üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
    @EventHandler
    public void onCmd(PlayerCommandPreprocessEvent e) {
        if (!plugin.getConfig().getBoolean("locks.block_commands", true)) return;
        if (!shouldBlock(e.getPlayer())) return;

        String msg = e.getMessage().toLowerCase().trim();
        List<String> blocked = plugin.getConfig().getStringList("locks.blocked_commands");

        // –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if (msg.startsWith("/login") || msg.startsWith("/l ") || msg.equals("/l")
                || msg.startsWith("/register") || msg.startsWith("/reg") || msg.equals("/reg")
                || msg.startsWith("/soldinregister") || msg.startsWith("/changepass")
                || msg.startsWith("/2fa") || msg.startsWith("/2faurl")) {
            return;
        }

        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–∏—Ä—É–µ–º—ã—Ö –∏–∑ config.yml ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º
        for (String c : blocked) {
            if (msg.startsWith("/" + c.toLowerCase())) {
                e.setCancelled(true);
                e.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&',
                        plugin.getConfig().getString("messages.must_login", "&c–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏: /login <–ø–∞—Ä–æ–ª—å>")));
                return;
            }
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        e.setCancelled(true);
        e.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&',
                plugin.getConfig().getString("messages.must_login",
                        "&c–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏: /login <–ø–∞—Ä–æ–ª—å>")));
    }

    @EventHandler
    public void onMove(PlayerMoveEvent e) {
        if (plugin.getConfig().getBoolean("locks.block_move", false) && shouldBlock(e.getPlayer()))
            e.setTo(e.getFrom());
    }

    @EventHandler
    public void onInteract(PlayerInteractEvent e) {
        if (plugin.getConfig().getBoolean("locks.block_interact", true) && shouldBlock(e.getPlayer()))
            e.setCancelled(true);
    }
}
